#! /usr/bin/env python3

import sys
import argparse
import yaml
import operator
import re

from datetime import datetime
from pathlib import Path, PurePath
from jinja2 import Environment, FileSystemLoader, contextfilter
from shutil import copytree, rmtree
from os import symlink
from anytree import Node, RenderTree, Resolver, PreOrderIter, LevelOrderIter, LevelOrderGroupIter
from anytree.search import find_by_attr as findNode
from anytree.resolver import ResolverError, ChildResolverError
from anytree.exporter import DictExporter
from anytree.iterators import PreOrderIter
from anytree.render import AsciiStyle

#---------------------
# Parse Arguments
#---------------------

parser = argparse.ArgumentParser()

parser.add_argument(
    '-t',
    '--templates',
    default = './templates',
    help = 'Directory path to get templates from.'
)

parser.add_argument(
    '-l',
    '--lib',
    default = './lib',
    help = 'Directory to get YAML inputs.'
)

parser.add_argument(
    '-o',
    '--output',
    default = './docs',
    help = 'Output root directory.'
)

args = parser.parse_args()

outdir = Path(args.output)
if outdir.exists():
    rmtree(outdir)

outdir.mkdir(parents = True, exist_ok = True)


#---------------------
# Setup Jinja2
#---------------------

def numberFormat(value):
    try:
        formattedStr = format(int(value), ',d')
    except (TypeError, ValueError):
        formattedStr = value
    return formattedStr

def listText(text):
    return '\n    '.join(text.split('\n'))

env = Environment(
    loader=FileSystemLoader(args.templates),
    extensions=['jinja2.ext.do'],
    trim_blocks = True,
    lstrip_blocks = True
)

env.filters['numberFormat'] = numberFormat
env.filters['listText'] = listText

#---------------------
# Custom Jinja Filters
#---------------------
@contextfilter
def autoLink(ctx, rawText):
    if 'no_autolink' in ctx.resolve('control'):
        return rawText
    myTitle = ctx.resolve('title')
    for linkTarget in globalLinks:
        searchText = linkTarget['text']
        linkText = linkTarget['link']
        if (linkText != myTitle):
            searchPattern = r'\b' + f"({searchText}('?s?)?)" + r'\b' + r'(?![^[]*])'
            replaceText = r'[\1]' + f'[{linkText}]'
            rawText = re.sub(searchPattern, replaceText, rawText, count=1)
    return rawText

env.filters['autoLink'] = autoLink


def sort_multi(L, *operators):
    Ls = sorted(L, key=operator.attrgetter(*operators))
    return Ls

env.filters['sort_multi'] = sort_multi

def stringifyKeys(dictionary):
    new_dict = dict((str(k), v) for k, v in dictionary.items())
    return new_dict

env.filters['stringifyKeys'] = stringifyKeys


def getTreeDirectChildren(tree):
    childless = [[node for node in children] for children in LevelOrderGroupIter(tree,
                                                                                 filter_=lambda n: not n.children)][1]
    childed = [[node for node in children] for children in LevelOrderGroupIter(tree, filter_=lambda n: n.children)][1]
    # Sort the lists
    childless.sort(key=lambda x: x.name)
    childed.sort(key=lambda x: x.name)
    return childless + childed
    
env.filters['getTreeDirectChildren'] = getTreeDirectChildren

def humanSortIntFirst(txt):
    if isinstance(txt, int):
        number = txt
        txt = str(number)
    else:
        numMatch = re.search(r'[0-9]+', txt).group(0)
        number = int(numMatch) if numMatch is not None else -1
    return (number, txt)

def rollSort(dictionary):
    sortedList = [(key, dictionary[key]) for key in sorted(dictionary, key=humanSortIntFirst)]
    return sortedList

env.filters['rollSort'] = rollSort

#---------------------
# Prepare the nav
#---------------------

def ageDecode(event):
    map_ = {'KAL' : 1, 'IDE' : 20, 'NON' : 28, 'X' : 2}
    ageStr = event['Date']
    ageList = ageStr.split(' ')
    ageList.extend(['0KAL','0KAL','0KAL'])
    ageList[0] = int(re.sub(r'[^- 0-9]', '', ageList[0]))
    ageList[1] = int(re.sub(r'[^ 0-9]', '', ageList[1]))
    try:
        day = int(re.sub(r'([0-9]*).*', r'\1', ageList[2]))
    except ValueError:
        day = 1
    mark = re.sub(r'[0-9]*(KAL|IDE|NON|X)', r'\1', ageList[2])
    ageList[2] = (32 - map_[mark] - (day - 2)) % 31
    return (ageList[0], ageList[1], ageList[2])


navTree = Node('Root')
date = datetime.today().strftime('%Y-%m-%d')

timelineStruct = list()

md_lib = list()


def resolveTreeNode(tree, pathStr):
    resolver = Resolver('name')
    try:
        node = resolver.get(tree, pathStr)
    except (ResolverError, ChildResolverError):
        parent = resolveTreeNode(tree, pathStr.rsplit('/',1)[0])
        node = Node(pathStr.split('/')[-1], parent=parent)
        
    return node

for path in Path(args.lib).glob('**/*.yml'):

    
    with open(path) as y_file:
        y_data = yaml.load(y_file, Loader=yaml.FullLoader)

    outpath = PurePath(args.output, path.stem).with_suffix('.md')

    md_lib.append({'path' : outpath, 'data' : y_data})

    #---------------------
    # Assemble the nav
    #---------------------

    rFile = PurePath(outpath.name)

    node = resolveTreeNode(navTree, f"/Root/{y_data['node']}/{y_data['title']}")

    node.title = y_data['title']
    node.file = str(rFile)
    node.noLink = ('control' in y_data and 'no_link' in y_data['control'])
    node.noAutoLink = ('control' in y_data and 'no_autolink' in y_data['control'])
    if 'altLink' in y_data:
        node.altLink = y_data['altLink']

    
    # Gather timeline information for a common timeline
    if ('History' in y_data) and ('Timeline' in y_data['History']):


        # Custom sort for timeline entries
        y_data['History']['Timeline'] = sorted(
            y_data['History']['Timeline'],
            key=ageDecode)


        for event in y_data['History']['Timeline']:
            event.update({'Source' : y_data['title']})
            timelineStruct.append(event)


#---------------------
# Write the Timeline
#---------------------

template = env.get_template('Timeline.md')
timeline = Path('./docs', 'Timeline.md')


node = resolveTreeNode(navTree, f"/Root/General/Timeline")
node.title = 'Timeline'
node.file = str(timeline.name)
node.noLink = False
node.noAutoLink = False

timelineSorted = sorted(timelineStruct, key=ageDecode)

with open(timeline, 'w') as timelineFile:
    timelineFile.write(template.render(timeline = timelineSorted, date=date))


#---------------------
# Prepare AutoLinker
#---------------------

linkedList = list()
fileLinks = list()
for node in PreOrderIter(navTree):
    if node.is_leaf and not node.noAutoLink:
        fileLinks.append({'title' : node.title,
                          'file' : node.file})
        linkedList.append({'text' : node.title,
                           'link' : node.title})
        if hasattr(node, 'altLink'):
            linkedList.append({'text' : node.altLink,
                               'link' : node.title})
globalLinks = sorted(linkedList, key = lambda k: len(k['text']), reverse = True)
                               
    
#---------------------
# Run link templater
#---------------------

links = Path(args.templates, 'links.md.j2')
template = env.get_template('links.j2')

with open(links, 'w') as linkFile:
    linkFile.write(template.render(fileLinks = fileLinks))

    
#---------------------
# Run Templater
#---------------------
for entry in md_lib:

    outpath = entry['path']
    
    y_data = entry['data']

    template = env.get_template(y_data['template'])

    with open(outpath, 'w') as outfile:
        outfile.write(template.render(y_data, date=date))
            
#---------------------
# Write the Cat Pages
#---------------------

template = env.get_template('Category.md')
for category in navTree.children:
    # Make sure it really is a category
    if category.children:
        page = Path(outdir, category.name).with_suffix('.md')
        category.file = page.name
        with open(page, 'w') as pageFile:
            pageFile.write(template.render(navTree = category,
                                           date = date))

#---------------------
# Write the config
#---------------------

template = env.get_template('mkdocs.yml')
config = Path('mkdocs.yml')
with open(config, 'w') as configFile:
    configFile.write(template.render(navTree = navTree))


    
#---------------------
# Write the Main Page
#---------------------

template = env.get_template('index.md')
index = Path(outdir, 'index.md')

with open(index, 'w') as indexFile:
    indexFile.write(template.render(navTree = navTree,
                                    date = date))


libpath = Path('lib')

symlink(Path('..').joinpath(libpath.joinpath('img')), outdir.joinpath('img'), target_is_directory=True)
symlink(Path('..').joinpath(libpath.joinpath('stylesheets')), outdir.joinpath('stylesheets'), target_is_directory=True)
symlink(Path('..').joinpath(libpath.joinpath('js')), outdir.joinpath('js'), target_is_directory=True)
